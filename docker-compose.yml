services:
  file_reader:
    build:
      context: ./file_reader_service
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./shared_volume/images:/app/images
      - ./:/app_input
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8005:8005"
      - "8006:8006"
    networks:
      - my_network

  downloader:
    build:
      context: ./downloader_service
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./shared_volume/images:/app/images
      - ./:/app_input
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "8000:8000"
      - "8003:8003"
    networks:
      - my_network

  embedding_generator:
    build:
      context: ./embedding_service
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./shared_volume/images:/app/images
    depends_on:
      - downloader
      - elasticsearch
      - postgres
      - redis
      - rabbitmq
    ports:
      - "8001:8001"
      - "8004:8004"
    networks:
      - my_network

  api:
    build:
      context: api_service
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      - elasticsearch
    ports:
      - "8080:8080"
      - "8002:8002"
    networks:
      - my_network

  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydb
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydb -h localhost"]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - my_network

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    volumes:
      - redisdata:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - my_network

  rabbitmq:
    image: rabbitmq:3.11-management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - my_network


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    restart: always
    environment:
      ES_JAVA_OPTS: -Xmx1g -Xms1g
      bootstrap.memory_lock: "true"
      discovery.type: single-node
      network.host: 0.0.0.0
      transport.host: 127.0.0.1
      http.host: 0.0.0.0
      xpack.security.enabled: 'false'
      xpack.monitoring.collection.enabled: 'true'
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep '\"status\":\"green\"'" ]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - my_network

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    depends_on:
      - downloader
      - embedding_generator
      - api
    networks:
      - my_network

  grafana:
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_PASSWORD: newpassword
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - my_network

  redis_exporter:
    image: oliver006/redis_exporter:latest
    environment:
      REDIS_ADDR: "redis:6379"
    ports:
      - "9121:9121"
    depends_on:
      - redis
    networks:
      - my_network

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: ghcr.io/joeferner/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    user: "root"
    depends_on:
      - redis
    networks:
      - my_network

  rabbitmq_exporter:
    image: kbudde/rabbitmq-exporter:latest
    environment:
      RABBIT_URL: "http://guest:guest@rabbitmq:15672"
    ports:
      - "9419:9419"
    depends_on:
      - rabbitmq
    networks:
      - my_network

  postgres_exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:latest
    environment:
      DATA_SOURCE_NAME: "postgresql://myuser:mypassword@postgres:5432/mydb?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - postgres
    networks:
      - my_network

  frontend:
    build: ./frontend_service
    environment:
      REACT_APP_API_BASE_URL: http://api:8080
    ports:
      - "3030:80"
    depends_on:
      - api
    networks:
      - my_network

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - my_network

volumes:
  pgdata:
  redisdata:
  pgadmin_data:
  esdata:

networks:
  my_network:
